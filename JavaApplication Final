import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

public class CreditCardCalculator {

    // Class to hold customer data
    static class Customer {
        String accountNumber; // Account number of the customer
        double startingBalance; // Starting balance of the customer
        double recentPurchase; // Most recent purchase amount
        double recentPayment; // Most recent payment amount

        // Constructor to initialize customer data
        public Customer(String accountNumber, double startingBalance, double recentPurchase, double recentPayment) {
            this.accountNumber = accountNumber;
            this.startingBalance = startingBalance;
            this.recentPurchase = recentPurchase;
            this.recentPayment = recentPayment;
        }
    }

    // Function to calculate the final balance for a customer
    public static double finalBalance(double oldBal, double purchase, double payment) {
        // Calculate the new balance by adding the purchase and subtracting the payment
        return oldBal + purchase - payment;
    }

    // Function to read the ledger file and return a list of customers
    public static List<Customer> readLedger(String fileName) throws IOException {
        List<Customer> customers = new ArrayList<>(); // Initialize a list to store customer data
        try (BufferedReader br = new BufferedReader(new FileReader(fileName))) { // Open the file for reading
            String line;
            // Read each line from the file
            while ((line = br.readLine()) != null) {
                String[] parts = line.split(","); // Split the line into parts by comma
                String accountNumber = parts[2]; // Extract the account number
                double startingBalance = Double.parseDouble(parts[3]); // Convert starting balance to double
                double recentPurchase = Double.parseDouble(parts[4]); // Convert recent purchase to double
                double recentPayment = Double.parseDouble(parts[5]); // Convert recent payment to double
                // Create a new Customer object and add it to the list
                customers.add(new Customer(accountNumber, startingBalance, recentPurchase, recentPayment));
            }
        }
        return customers; // Return the list of customers
    }

    public static void main(String[] args) {
        String fileName = "ledger.dat"; // Input file name containing customer data
        try {
            // Read customer data from the ledger file
            List<Customer> customers = readLedger(fileName);
            double totalBalance = 0; // Initialize total balance to zero
            double highestBalance = Double.NEGATIVE_INFINITY; // Set initial highest balance to negative infinity
            double lowestBalance = Double.POSITIVE_INFINITY; // Set initial lowest balance to positive infinity
            String highestAccount = ""; // Initialize variable to store account number with highest balance
            String lowestAccount = ""; // Initialize variable to store account number with lowest balance

            // Process each customer in the list
            for (Customer customer : customers) {
                // Calculate the final balance for the current customer
                double finalBal = finalBalance(customer.startingBalance, customer.recentPurchase, customer.recentPayment);
                totalBalance += finalBal; // Update total balance

                // Check for the highest balance
                if (finalBal > highestBalance) {
                    highestBalance = finalBal; // Update highest balance
                    highestAccount = customer.accountNumber; // Update account number for highest balance
                }
                // Check for the lowest balance
                if (finalBal < lowestBalance) {
                    lowestBalance = finalBal; // Update lowest balance
                    lowestAccount = customer.accountNumber; // Update account number for lowest balance
                }

                // Print the account number and final balance for the current customer
                System.out.printf("Account Number: %s, Final Balance: $%.2f%n", customer.accountNumber, finalBal);
            }

            // Calculate average balance by dividing total balance by the number of customers
            double averageBalance = totalBalance / customers.size();

            // Print the highest and lowest balances along with their account numbers
            System.out.printf("%nHighest Balance: Account Number: %s, Balance: $%.2f%n", highestAccount, highestBalance);
            System.out.printf("Lowest Balance: Account Number: %s, Balance: $%.2f%n", lowestAccount, lowestBalance);
            System.out.printf("Average Balance: $%.2f%n", averageBalance);

        } catch (IOException e) {
            // Handle any IO exceptions that occur while reading the file
            System.err.println("Error reading the ledger file: " + e.getMessage());
        }
    }
}
